[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pachyderm"
description = "Physics Analysis Core for Heavy-Ions"
readme = "README.md"
license = "BSD-3-Clause"
requires-python = ">=3.10"
keywords = [
    "HEP",
    "ALICE",
]
authors = [
  { name = "Raymond Ehlers", email = "raymond.ehlers@cern.ch" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dynamic = ["version"]
include = [
    "pachyderm/py.typed",
    "pachyderm/alice/datasets/*.yaml",
]
dependencies = [
    "attrs >=21.2.0",
    "numpy >=1.21",
    "scipy >=1.7.0",
    "matplotlib >=3.3.2",
    "iminuit >=2.7.0",
    "numdifftools >=0.9.40",
    "ruamel.yaml >=0.17.10",
]

[project.optional-dependencies]
docs = [
    "Sphinx >=4.0.3",
    "recommonmark >=0.7.1",
    "sphinx-markdown-tables >=0.0.15",
    "importlib-metadata >=4.6.1",
]
dev = [
    "uproot >=4",
    "pre-commit >=2.13.0",
    "flake8 >=3.9.2",
    "mypy >=0.931",
    "pytest >=6.2.4",
    "pytest-cov >=2.12.1",
    "pytest-mock >=3.6.1",
    "codecov >=2.1.11",
    "boost-histogram >=1.2.1",
    "black >=22.1.0",
    "isort >= 5.10",
    "ruff>=0.0.209",
]

[project.scripts]
downloadALICEDataset = "pachyderm.alice.download:run_dataset_download"
downloadALICERunByRun = "pachyderm.alice.download:run_download_run_by_run_train_output"

[tool.hatch]
version.path = "src/pachyderm/__init__.py"

[tool.mypy]
files = "src"
python_version = "3.10"
warn_unused_configs = true
strict = true
ignore_missing_imports = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[tool.black]
line-length = 120
target-version = ["py36"]

[tool.ruff]
exclude = [
    '.git',
    '.env',
    '.env3',
    '.py3.7',
    '.venv',
    'env',
    '__pycache__',
    'bak',
    'build',
    'dist',
]
line-length = 120
select = [
    "E", "F", "W", # flake8
    "C901",        # mccabe
    "B", "B904",   # flake8-bugbear
    "I",           # isort
    "ARG",         # flake8-unused-arguments
    "C4",          # flake8-comprehensions
    "EM",          # flake8-errmsg
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "RET",         # flake8-return
    "RUF",         # Ruff-specific
    "SIM",         # flake8-simplify
    "T20",         # flake8-print
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
ignore = [
    "E501",
    "E722",
    "RUF001",  # Unicode chars
    "PLR",
]
unfixable = [
    "T20",  # Removes print statements
    "F841", # Removes unused variables
]
target-version = 'py38'

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.isort]
known-first-party = ["mammoth", "mammoth_cpp"]


[tool.pylint]
master.py-version = "3.10"
master.ignore-paths= ["src/pachyderm/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "wrong-import-position",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = [
  "tests",
]

[tool.check-manifest]
ignore = [
  ".github/**",
  "docs/**",
  ".pre-commit-config.yaml",
  ".readthedocs.yml",
  "src/*/_version.py",
  "noxfile.py",
]

